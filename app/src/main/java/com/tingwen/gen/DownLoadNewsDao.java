package com.tingwen.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.tingwen.greendao.DownLoadNews;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DOWN_LOAD_NEWS".
*/
public class DownLoadNewsDao extends AbstractDao<DownLoadNews, String> {

    public static final String TABLENAME = "DOWN_LOAD_NEWS";

    /**
     * Properties of entity DownLoadNews.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property Post_date = new Property(1, String.class, "post_date", false, "POST_DATE");
        public final static Property Post_title = new Property(2, String.class, "post_title", false, "POST_TITLE");
        public final static Property Post_lai = new Property(3, String.class, "post_lai", false, "POST_LAI");
        public final static Property Post_mp = new Property(4, String.class, "post_mp", false, "POST_MP");
        public final static Property Post_time = new Property(5, String.class, "post_time", false, "POST_TIME");
        public final static Property Post_size = new Property(6, String.class, "post_size", false, "POST_SIZE");
        public final static Property Post_excerpt = new Property(7, String.class, "post_excerpt", false, "POST_EXCERPT");
        public final static Property Smeta = new Property(8, String.class, "smeta", false, "SMETA");
    }


    public DownLoadNewsDao(DaoConfig config) {
        super(config);
    }
    
    public DownLoadNewsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DOWN_LOAD_NEWS\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"POST_DATE\" TEXT," + // 1: post_date
                "\"POST_TITLE\" TEXT," + // 2: post_title
                "\"POST_LAI\" TEXT," + // 3: post_lai
                "\"POST_MP\" TEXT," + // 4: post_mp
                "\"POST_TIME\" TEXT," + // 5: post_time
                "\"POST_SIZE\" TEXT," + // 6: post_size
                "\"POST_EXCERPT\" TEXT," + // 7: post_excerpt
                "\"SMETA\" TEXT);"); // 8: smeta
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DOWN_LOAD_NEWS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DownLoadNews entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String post_date = entity.getPost_date();
        if (post_date != null) {
            stmt.bindString(2, post_date);
        }
 
        String post_title = entity.getPost_title();
        if (post_title != null) {
            stmt.bindString(3, post_title);
        }
 
        String post_lai = entity.getPost_lai();
        if (post_lai != null) {
            stmt.bindString(4, post_lai);
        }
 
        String post_mp = entity.getPost_mp();
        if (post_mp != null) {
            stmt.bindString(5, post_mp);
        }
 
        String post_time = entity.getPost_time();
        if (post_time != null) {
            stmt.bindString(6, post_time);
        }
 
        String post_size = entity.getPost_size();
        if (post_size != null) {
            stmt.bindString(7, post_size);
        }
 
        String post_excerpt = entity.getPost_excerpt();
        if (post_excerpt != null) {
            stmt.bindString(8, post_excerpt);
        }
 
        String smeta = entity.getSmeta();
        if (smeta != null) {
            stmt.bindString(9, smeta);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DownLoadNews entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String post_date = entity.getPost_date();
        if (post_date != null) {
            stmt.bindString(2, post_date);
        }
 
        String post_title = entity.getPost_title();
        if (post_title != null) {
            stmt.bindString(3, post_title);
        }
 
        String post_lai = entity.getPost_lai();
        if (post_lai != null) {
            stmt.bindString(4, post_lai);
        }
 
        String post_mp = entity.getPost_mp();
        if (post_mp != null) {
            stmt.bindString(5, post_mp);
        }
 
        String post_time = entity.getPost_time();
        if (post_time != null) {
            stmt.bindString(6, post_time);
        }
 
        String post_size = entity.getPost_size();
        if (post_size != null) {
            stmt.bindString(7, post_size);
        }
 
        String post_excerpt = entity.getPost_excerpt();
        if (post_excerpt != null) {
            stmt.bindString(8, post_excerpt);
        }
 
        String smeta = entity.getSmeta();
        if (smeta != null) {
            stmt.bindString(9, smeta);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public DownLoadNews readEntity(Cursor cursor, int offset) {
        DownLoadNews entity = new DownLoadNews( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // post_date
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // post_title
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // post_lai
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // post_mp
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // post_time
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // post_size
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // post_excerpt
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // smeta
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DownLoadNews entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setPost_date(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPost_title(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPost_lai(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPost_mp(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPost_time(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPost_size(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPost_excerpt(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setSmeta(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final String updateKeyAfterInsert(DownLoadNews entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(DownLoadNews entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DownLoadNews entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
